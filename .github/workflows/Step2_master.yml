name: Master and Releaser

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use your desired Node.js version

      - name: Install dependencies
        run: npm install

      - name: Build the application
        run: npm run build # Adjust if your build command is different

      - name: Create a new version and release
        id: release
        run: |
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Debug version output
        run: echo "Version: ${{ steps.release.outputs.version }}"

      - name: Create and push version tag
        if: steps.release.outputs.version != ''
        run: |
          TAG_NAME=v${{ steps.release.outputs.version }}
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }} # Use the GitHub actor (the user triggering the action)
          password: ${{ secrets.GITHUB_TOKEN }} # Use the provided GitHub token

      - name: Build and push container versioned image
        if: steps.release.outputs.version != ''
        run: |
          VERSION="${{ steps.release.outputs.version }}"
          IMAGE_NAME="ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]'):${VERSION}"
          echo "Building versioned image: $IMAGE_NAME"
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME

      - name: Build and push container latest image
        run: |
          IMAGE_NAME="ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]'):latest"
          echo "Building latest image: $IMAGE_NAME"
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
